@using DynamicFormBlazor.Services
@inject IMarkdownService MarkdownService
@inject IJSRuntime JSRuntime

<PageTitle>@Title - Dynamic Form Blazor</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="py-4">
    <MudGrid>
        <MudItem xs="12" lg="9">
            <MudCard Elevation="2">
                <MudCardContent>
                    @if (isLoading)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                        <MudText Class="mt-4" Align="Align.Center">Loading documentation...</MudText>
                    }
                    else
                    {
                        <div class="markdown-content">
                            @((MarkupString)htmlContent)
                        </div>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" lg="3">
            <MudCard Elevation="1">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Table of Contents</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudNavMenu>
                        @foreach (var tocSection in tableOfContents)
                        {
                            <MudNavLink OnClick="@(() => ScrollToSection(tocSection.Id))">
                                @tocSection.Title
                            </MudNavLink>
                        }
                    </MudNavMenu>
                </MudCardContent>
            </MudCard>
            
            <MudCard Elevation="1" Class="mt-4">
                <MudCardContent>
                    <MudText Typo="Typo.h6" GutterBottom="true">Quick Links</MudText>
                    <MudStack Spacing="2">
                        <MudButton Variant="Variant.Outlined" 
                                  Color="Color.Primary" 
                                  StartIcon="@Icons.Material.Filled.PlayArrow"
                                  Href="/fluent"
                                  FullWidth="true">
                            Try Live Demo
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" 
                                  Color="Color.Secondary" 
                                  StartIcon="@Icons.Custom.Brands.GitHub"
                                  Href="https://github.com"
                                  Target="_blank"
                                  FullWidth="true">
                            View Source
                        </MudButton>
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Parameter] public string DocumentName { get; set; } = "";
    [Parameter] public string Title { get; set; } = "Documentation";
    
    private bool isLoading = true;
    private string htmlContent = "";
    private List<TocSection> tableOfContents = new();
    private bool contentChanged = false;
    
    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(DocumentName))
        {
            await LoadDocumentAsync();
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (contentChanged)
        {
            contentChanged = false;
            try
            {
                // Trigger Prism.js highlighting after content is rendered
                await JSRuntime.InvokeVoidAsync("Prism.highlightAll");
            }
            catch (Exception)
            {
                // Ignore JavaScript interop errors during prerendering
            }
        }
    }
    
    private async Task LoadDocumentAsync()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            var markdown = await MarkdownService.LoadDocumentAsync(DocumentName);
            htmlContent = MarkdownService.ToHtml(markdown);
            ExtractTableOfContents(markdown);
            contentChanged = true; // Flag that content has changed for syntax highlighting
        }
        catch (Exception ex)
        {
            htmlContent = $"<div class='error'>Error loading document: {ex.Message}</div>";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private void ExtractTableOfContents(string markdown)
    {
        tableOfContents.Clear();
        var lines = markdown.Split('\n');
        
        foreach (var line in lines)
        {
            if (line.StartsWith("## "))
            {
                var title = line[3..].Trim();
                var id = title.ToLower().Replace(" ", "-").Replace(".", "");
                tableOfContents.Add(new TocSection { Title = title, Id = id });
            }
        }
    }
    
    private async Task ScrollToSection(string sectionId)
    {
        await JSRuntime.InvokeVoidAsync("scrollToElement", sectionId);
    }
    
    private class TocSection
    {
        public string Title { get; set; } = "";
        public string Id { get; set; } = "";
    }
}