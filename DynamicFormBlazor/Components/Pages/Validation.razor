@page "/validation"
@using DynamicFormBlazor.Models
@using DynamicFormBlazor.Validators
@using DynamicFormBlazor.Components.Shared
@using DynamicFormBlazor.Components.Layout

<PageTitle>Form Validation Demo</PageTitle>

<FormPageLayout PageTitle="Form Validation with FluentValidation"
                PageDescription="This demo showcases advanced form validation using FluentValidation with real-time validation feedback."
                PageIcon="@Icons.Material.Filled.VerifiedUser"
                FormTitle="Validation Demo Form"
                FormIcon="@Icons.Material.Filled.Assignment">
    
    <FormContent>
        <EditForm id="validation-form" Model="@model" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="model.FirstName" 
                                 Label="First Name" 
                                 Required="true"
                                 Immediate="true"
                                 For="@(() => model.FirstName)" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="model.LastName" 
                                 Label="Last Name" 
                                 Required="true"
                                 Immediate="true"
                                 For="@(() => model.LastName)" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="model.Email" 
                                 Label="Email" 
                                 Required="true"
                                 Immediate="true"
                                 For="@(() => model.Email)" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudNumericField @bind-Value="model.Age" 
                                    Label="Age" 
                                    Min="0"
                                    Max="150"
                                    For="@(() => model.Age)" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="model.PhoneNumber" 
                                 Label="Phone Number" 
                                 For="@(() => model.PhoneNumber)" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudDatePicker @bind-Date="model.DateOfBirth" 
                                  Label="Date of Birth" 
                                  MaxDate="DateTime.Today"
                                  For="@(() => model.DateOfBirth)" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="model.Address" 
                                 Label="Address" 
                                 For="@(() => model.Address)" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="model.City" 
                                 Label="City" 
                                 For="@(() => model.City)" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="model.PostalCode" 
                                 Label="Postal Code" 
                                 For="@(() => model.PostalCode)" />
                </MudItem>
                <MudItem xs="12">
                    <MudButton ButtonType="ButtonType.Submit" 
                              Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              Class="ml-auto">
                        Submit Form
                    </MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
        
        @if (isSubmitted)
        {
            <MudAlert Severity="Severity.Success" Class="mt-4">
                <MudText Typo="Typo.h6">Form submitted successfully!</MudText>
                <MudText>Check the submitted data below.</MudText>
            </MudAlert>
        }
    </FormContent>
    
    <SidebarContent>
        <FormGuidelines Guidelines="@guidelines" Title="Validation Features" />
        <FormHelpPanel HelpText="This form demonstrates FluentValidation integration with real-time validation feedback." />
    </SidebarContent>
    
    <SuccessContent>
        @if (isSubmitted)
        {
            <FormSuccessDisplay TModel="Person" 
                               DataDisplayItems="@GetDataDisplayItems()"
                               OnReset="@ResetForm" />
        }
    </SuccessContent>
    
</FormPageLayout>

@code {
    private Person model = new Person();
    private bool isSubmitted;
    private EditContext? editContext;
    private ValidationMessageStore? messageStore;

    private List<FormGuidelines.GuidelineItem> guidelines = new()
    {
        new() { Icon = Icons.Material.Filled.Speed, Color = Color.Primary, Text = "Real-time validation feedback" },
        new() { Icon = Icons.Material.Filled.Security, Color = Color.Success, Text = "Required field validation" },
        new() { Icon = Icons.Material.Filled.Email, Color = Color.Info, Text = "Email format validation" },
        new() { Icon = Icons.Material.Filled.TextFields, Color = Color.Secondary, Text = "String length constraints" },
        new() { Icon = Icons.Material.Filled.Pattern, Color = Color.Tertiary, Text = "Pattern matching validation" },
        new() { Icon = Icons.Material.Filled.DateRange, Color = Color.Warning, Text = "Date range validation" }
    };

    protected override void OnInitialized()
    {
        editContext = new EditContext(model);
        messageStore = new ValidationMessageStore(editContext);
        
        var validator = new PersonValidator();
        editContext.OnFieldChanged += (_, args) =>
        {
            messageStore.Clear(args.FieldIdentifier);
            var validationResult = validator.Validate(model);
            
            foreach (var error in validationResult.Errors.Where(e => e.PropertyName == args.FieldIdentifier.FieldName))
            {
                messageStore.Add(args.FieldIdentifier, error.ErrorMessage);
            }
            
            editContext.NotifyValidationStateChanged();
        };
    }

    private void HandleValidSubmit()
    {
        var validator = new PersonValidator();
        var result = validator.Validate(model);
        
        if (result.IsValid)
        {
            isSubmitted = true;
        }
        else
        {
            messageStore?.Clear();
            foreach (var error in result.Errors)
            {
                var fieldIdentifier = new FieldIdentifier(model, error.PropertyName);
                messageStore?.Add(fieldIdentifier, error.ErrorMessage);
            }
            editContext?.NotifyValidationStateChanged();
        }
    }
    
    private void ResetForm()
    {
        model = new Person();
        isSubmitted = false;
        StateHasChanged();
    }
    
    private List<FormSuccessDisplay<Person>.DataDisplayItem> GetDataDisplayItems()
    {
        var items = new List<FormSuccessDisplay<Person>.DataDisplayItem>
        {
            new() { Label = "Full Name", Value = $"{model.FirstName} {model.LastName}" },
            new() { Label = "Email", Value = model.Email ?? "" },
            new() { Label = "Age", Value = model.Age.ToString() }
        };
        
        if (!string.IsNullOrEmpty(model.PhoneNumber))
            items.Add(new() { Label = "Phone", Value = model.PhoneNumber });
            
        if (model.DateOfBirth.HasValue)
            items.Add(new() { Label = "Date of Birth", Value = model.DateOfBirth.Value.ToShortDateString() });
            
        if (!string.IsNullOrEmpty(model.Address))
            items.Add(new() { Label = "Address", Value = model.Address });
            
        if (!string.IsNullOrEmpty(model.City))
            items.Add(new() { Label = "City", Value = model.City });
            
        if (!string.IsNullOrEmpty(model.PostalCode))
            items.Add(new() { Label = "Postal Code", Value = model.PostalCode });
        
        return items;
    }
}