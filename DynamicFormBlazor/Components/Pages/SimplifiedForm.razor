@page "/"
@page "/simplified"
@using DynamicFormBlazor.Models
@using DynamicFormBlazor.Components.Shared
@using DynamicFormBlazor.Components.Layout
@using FormCraft

<PageTitle>Simplified Dynamic Form API</PageTitle>

<FormPageLayout PageTitle="Simplified Dynamic Form API"
                PageDescription="This demonstrates the simplified API that hides complexity from users while providing powerful features."
                PageIcon="@Icons.Material.Filled.AutoFixHigh"
                FormTitle="DynamicFormComponent"
                FormIcon="@Icons.Material.Filled.Assignment">
    
    <FormContent>
        <DynamicFormComponent TModel="ContactModel" 
                            Model="@_model" 
                            Configuration="@_formConfiguration"
                            OnValidSubmit="@HandleValidSubmit"
                            OnFieldChanged="@(args => HandleFieldChanged(args.fieldName, args.value))"
                            IsSubmitting="@_isSubmitting" />
        
        @if (_fieldChanges.Any())
        {
            <MudCard Class="mt-4" Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.h6" GutterBottom="true" Class="d-flex align-items-center">
                        <MudIcon Icon="@Icons.Material.Filled.Timeline" Class="me-2 text-info" />
                        Field Changes Log
                    </MudText>
                    <MudList T="string" Dense="true">
                        @foreach (var change in _fieldChanges.TakeLast(5))
                        {
                            <MudListItem T="string" Icon="@Icons.Material.Filled.Update" IconColor="Color.Secondary">
                                <MudText Typo="Typo.body2">@change</MudText>
                            </MudListItem>
                        }
                    </MudList>
                </MudCardContent>
            </MudCard>
        }
    </FormContent>
    
    <SidebarContent>
        <FormGuidelines Guidelines="@_guidelines" Title="Simplified API Benefits" />
        
        <MudCard Elevation="2" Class="mt-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" GutterBottom="true" Class="d-flex align-items-center">
                    <MudIcon Icon="@Icons.Material.Filled.Code" Class="me-2 text-info" />
                    Usage Example
                </MudText>
                <MudPaper Class="pa-3" Elevation="1">
                    <pre style="font-size: 11px; line-height: 1.3; white-space: pre-wrap; color: #2d3748;">// Build form configuration
var formConfiguration = FormBuilder&lt;ContactModel&gt;
    .Create()
    .AddField(x => x.FirstName)
        .Required()
    .AddField(x => x.Email)
        .WithEmailValidation()
    .Build();

// Use in Razor component
&lt;DynamicFormComponent TModel="ContactModel" 
    Model="@_model" 
    Configuration="@_formConfiguration"
    OnValidSubmit="@HandleValidSubmit" /&gt;</pre>
                </MudPaper>
            </MudCardContent>
        </MudCard>
        
        <FormHelpPanel HelpText="This API encapsulates all form rendering logic into a single component, making it very easy to use for simple scenarios." />
    </SidebarContent>
    
    <SuccessContent>
        @if (_isSubmitted)
        {
            <FormSuccessDisplay TModel="ContactModel" 
                               DataDisplayItems="@GetDataDisplayItems()"
                               OnReset="@ResetForm" />
        }
    </SuccessContent>
    
</FormPageLayout>

@code {
    private ContactModel _model = new();
    private bool _isSubmitted;
    private bool _isSubmitting;
    private List<string> _fieldChanges = new();
    private IFormConfiguration<ContactModel> _formConfiguration = null!;
    
    private List<FormGuidelines.GuidelineItem> _guidelines = new()
    {
        new() { Icon = Icons.Material.Filled.Widgets, Color = Color.Primary, Text = "Single component handles all rendering" },
        new() { Icon = Icons.Material.Filled.AutoAwesome, Color = Color.Secondary, Text = "Automatic field value binding" },
        new() { Icon = Icons.Material.Filled.AccountTree, Color = Color.Tertiary, Text = "Built-in dependency handling" },
        new() { Icon = Icons.Material.Filled.CodeOff, Color = Color.Info, Text = "No manual RenderTreeBuilder code" },
        new() { Icon = Icons.Material.Filled.Extension, Color = Color.Success, Text = "Extension methods for validation" },
        new() { Icon = Icons.Material.Filled.Speed, Color = Color.Warning, Text = "Real-time field change tracking" }
    };
    
    protected override void OnInitialized()
    {
        // Much simpler configuration setup
        _formConfiguration = FormBuilder<ContactModel>
            .Create()
            .AddField(x => x.FirstName)
                .WithLabel("First Name")
                .Required("First name is required")
                .WithMinLength(2, "Must be at least 2 characters")
                .WithPlaceholder("Enter your first name")
            .AddField(x => x.LastName)
                .WithLabel("Last Name")
                .Required("Last name is required")
                .WithMinLength(2, "Must be at least 2 characters")
                .WithPlaceholder("Enter your last name")
            .AddField(x => x.Email)
                .WithLabel("Email Address")
                .Required("Email is required")
                .WithEmailValidation()
                .WithPlaceholder("your.email@example.com")
            .AddField(x => x.Age)
                .WithLabel("Age")
                .Required("Age is required")
                .WithRange(16, 100, "Age must be between 16 and 100")
            .AddField(x => x.Country)
                .WithLabel("Country")
                .Required("Please select your country")
                .WithOptions(
                    ("US", "United States"),
                    ("CA", "Canada"),
                    ("UK", "United Kingdom"),
                    ("DE", "Germany"),
                    ("FR", "France")
                )
            .AddField(x => x.City)
                .WithLabel("City")
                .WithPlaceholder("Enter your city")
                .VisibleWhen(m => !string.IsNullOrEmpty(m.Country))
                .DependsOn(x => x.Country, (model, country) =>
                {
                    if (string.IsNullOrEmpty(country))
                    {
                        model.City = null;
                    }
                })
            .AddField(x => x.SubscribeToNewsletter)
                .WithLabel("Subscribe to Newsletter")
                .WithHelpText("Get updates about new features")
            .Build();
    }
    
    private async Task HandleValidSubmit(ContactModel submittedModel)
    {
        _isSubmitting = true;
        StateHasChanged();
        
        // Simulate API call
        await Task.Delay(2000);
        
        _isSubmitted = true;
        _isSubmitting = false;
        StateHasChanged();
    }
    
    private Task HandleFieldChanged(string fieldName, object? value)
    {
        _fieldChanges.Add($"{DateTime.Now:HH:mm:ss} - {fieldName}: {value}");
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private void ResetForm()
    {
        _model = new ContactModel();
        _isSubmitted = false;
        _fieldChanges.Clear();
        StateHasChanged();
    }
    
    private List<FormSuccessDisplay<ContactModel>.DataDisplayItem> GetDataDisplayItems()
    {
        var items = new List<FormSuccessDisplay<ContactModel>.DataDisplayItem>
        {
            new() { Label = "Full Name", Value = $"{_model.FirstName} {_model.LastName}" },
            new() { Label = "Email", Value = _model.Email ?? "" },
            new() { Label = "Age", Value = _model.Age.ToString() },
            new() { Label = "Country", Value = _model.Country ?? "" }
        };
        
        if (!string.IsNullOrEmpty(_model.City))
            items.Add(new() { Label = "City", Value = _model.City });
            
        items.Add(new() { Label = "Newsletter", Value = _model.SubscribeToNewsletter ? "Yes" : "No" });
        
        if (_fieldChanges.Any())
            items.Add(new() { Label = "Field Changes", Value = $"{_fieldChanges.Count} changes tracked" });
        
        return items;
    }
}