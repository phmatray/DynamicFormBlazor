@page "/improved"
@using DynamicFormBlazor.Models
@using DynamicFormBlazor.Components.Shared
@using DynamicFormBlazor.Components.Layout
@using FormCraft
@inject IFieldRendererService FieldRendererService

<PageTitle>Improved Dynamic Form API</PageTitle>

<FormPageLayout PageTitle="Improved Dynamic Form API"
                PageDescription="This demonstrates the new type-safe, feature-rich dynamic form API with validation, dependencies, and advanced field configuration."
                PageIcon="@Icons.Material.Filled.Engineering"
                FormTitle="Type-Safe Form Builder"
                FormIcon="@Icons.Material.Filled.Build">
    
    <FormContent>
        <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            
            @foreach (var field in formConfiguration.Fields.OrderBy(f => f.Order))
            {
                @if (ShouldShowField(field))
                {
                    <div class="mb-4">
                        @FieldRendererService.RenderField(model, field, 
                            EventCallback.Factory.Create<object?>(this, value => SetFieldValue(field.FieldName, value)),
                            EventCallback.Factory.Create(this, () => HandleFieldDependencies(field.FieldName)))
                    </div>
                }
            }
            
            <MudCardActions Class="justify-center pa-4">
                <MudButton ButtonType="ButtonType.Submit"
                          Variant="Variant.Filled"
                          Color="Color.Primary"
                          Size="Size.Large"
                          Disabled="@isSubmitting"
                          StartIcon="@(isSubmitting ? Icons.Material.Filled.HourglassEmpty : Icons.Material.Filled.Send)"
                          Class="px-8">
                    @if (isSubmitting)
                    {
                        <MudProgressCircular Class="me-2" Size="Size.Small" Indeterminate="true" />
                        <span>Submitting...</span>
                    }
                    else
                    {
                        <span>Submit Application</span>
                    }
                </MudButton>
            </MudCardActions>
        </EditForm>
    </FormContent>
    
    <SidebarContent>
        <FormGuidelines Guidelines="@guidelines" Title="API Features" />
        
        <MudCard Elevation="2" Class="mt-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" GutterBottom="true" Class="d-flex align-items-center">
                    <MudIcon Icon="@Icons.Material.Filled.Code" Class="me-2 text-info" />
                    Code Example
                </MudText>
                <MudPaper Class="pa-3" Elevation="1">
                    <pre style="font-size: 11px; line-height: 1.3; white-space: pre-wrap; color: #2d3748;">FormBuilder&lt;ContactModel&gt;
    .Create()
    .AddField(x => x.FirstName)
        .WithLabel("First Name")
        .Required("Required field")
        .WithMinLength(2)
    .AddField(x => x.Email)
        .WithEmailValidation()
    .AddField(x => x.Country)
        .WithOptions(("US", "USA"))
    .AddField(x => x.City)
        .VisibleWhen(m => !string.IsNullOrEmpty(m.Country))
        .DependsOn(x => x.Country, (model, country) => {
            if (string.IsNullOrEmpty(country)) 
                model.City = null;
        })
    .Build();</pre>
                </MudPaper>
            </MudCardContent>
        </MudCard>
        
        <FormHelpPanel HelpText="This demonstrates the advanced FormBuilder API with type safety, validation, and field dependencies." />
    </SidebarContent>
    
    <SuccessContent>
        @if (isSubmitted)
        {
            <FormSuccessDisplay TModel="ContactModel" 
                               DataDisplayItems="@GetDataDisplayItems()"
                               OnReset="@ResetForm" />
        }
    </SuccessContent>
    
</FormPageLayout>

@code {
    private ContactModel model = new();
    private bool isSubmitted;
    private bool isSubmitting;
    private IFormConfiguration<ContactModel> formConfiguration = null!;
    
    private List<FormGuidelines.GuidelineItem> guidelines = new()
    {
        new() { Icon = Icons.Material.Filled.Security, Color = Color.Primary, Text = "Type-safe form builder API" },
        new() { Icon = Icons.Material.Filled.Verified, Color = Color.Secondary, Text = "Fluent validation integration" },
        new() { Icon = Icons.Material.Filled.AccountTree, Color = Color.Tertiary, Text = "Field dependencies & visibility" },
        new() { Icon = Icons.Material.Filled.AutoAwesome, Color = Color.Info, Text = "Automatic field rendering" },
        new() { Icon = Icons.Material.Filled.Extension, Color = Color.Success, Text = "Extensible with custom validators" },
        new() { Icon = Icons.Material.Filled.Speed, Color = Color.Warning, Text = "Real-time validation feedback" }
    };
    
    protected override void OnInitialized()
    {
        // This is our improved API in action!
        formConfiguration = FormBuilder<ContactModel>
            .Create()
            .AddField(x => x.FirstName)
                .WithLabel("First Name")
                .Required("First name is required")
                .WithMinLength(2, "Must be at least 2 characters")
                .WithPlaceholder("Enter your first name")
            .AddField(x => x.LastName)
                .WithLabel("Last Name")
                .Required("Last name is required")
                .WithMinLength(2, "Must be at least 2 characters")
                .WithPlaceholder("Enter your last name")
            .AddField(x => x.Email)
                .WithLabel("Email Address")
                .Required("Email is required")
                .WithEmailValidation()
                .WithPlaceholder("your.email@example.com")
            .AddField(x => x.Age)
                .WithLabel("Age")
                .Required("Age is required")
                .WithRange(16, 100, "Age must be between 16 and 100")
            .AddField(x => x.Country)
                .WithLabel("Country")
                .Required("Please select your country")
                .WithOptions(
                    ("US", "United States"),
                    ("CA", "Canada"),
                    ("UK", "United Kingdom"),
                    ("DE", "Germany"),
                    ("FR", "France")
                )
            .AddField(x => x.City)
                .WithLabel("City")
                .WithPlaceholder("Enter your city")
                .VisibleWhen(m => !string.IsNullOrEmpty(m.Country))
                .DependsOn(x => x.Country, (model, country) =>
                {
                    if (string.IsNullOrEmpty(country))
                    {
                        model.City = null;
                    }
                })
            .AddField(x => x.SubscribeToNewsletter)
                .WithLabel("Subscribe to Newsletter")
                .WithHelpText("Get updates about new features")
            .Build();
    }
    
    private bool ShouldShowField(IFieldConfiguration<ContactModel, object> field)
    {
        if (field.VisibilityCondition != null)
        {
            return field.VisibilityCondition(model);
        }
        return field.IsVisible;
    }
    
    
    private void SetFieldValue(string fieldName, object value)
    {
        var property = typeof(ContactModel).GetProperty(fieldName);
        property?.SetValue(model, value);
        StateHasChanged();
    }
    
    private void HandleFieldDependencies(string changedFieldName)
    {
        if (formConfiguration.FieldDependencies.TryGetValue(changedFieldName, out var dependencies))
        {
            foreach (var dependency in dependencies)
            {
                dependency.OnDependencyChanged(model);
            }
            StateHasChanged();
        }
    }
    
    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        
        // Simulate API call
        await Task.Delay(2000);
        
        isSubmitted = true;
        isSubmitting = false;
        StateHasChanged();
    }
    
    private void ResetForm()
    {
        model = new ContactModel();
        isSubmitted = false;
        StateHasChanged();
    }
    
    private List<FormSuccessDisplay<ContactModel>.DataDisplayItem> GetDataDisplayItems()
    {
        var items = new List<FormSuccessDisplay<ContactModel>.DataDisplayItem>
        {
            new() { Label = "Full Name", Value = $"{model.FirstName} {model.LastName}" },
            new() { Label = "Email", Value = model.Email ?? "" },
            new() { Label = "Age", Value = model.Age.ToString() },
            new() { Label = "Country", Value = model.Country ?? "" }
        };
        
        if (!string.IsNullOrEmpty(model.City))
            items.Add(new() { Label = "City", Value = model.City });
            
        items.Add(new() { Label = "Newsletter", Value = model.SubscribeToNewsletter ? "Yes" : "No" });
        
        return items;
    }
}