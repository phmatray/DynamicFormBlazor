@page "/fluent"
@using FormCraft.Forms.Builders
@using FormCraft.Forms.Core
@using FormCraft.Forms.Extensions
@using DynamicFormBlazor.Models
@using DynamicFormBlazor.Components.Shared
@using DynamicFormBlazor.Components.Layout

<PageTitle>Fluent API Dynamic Form</PageTitle>

<FormPageLayout PageTitle="Fluent API Dynamic Form"
                PageDescription="This demonstrates the fluent API with helper methods for common field types and streamlined form building."
                PageIcon="@Icons.Material.Filled.FlashOn"
                FormTitle="Contact Information Form"
                FormIcon="@Icons.Material.Filled.ContactPage">
    
    <FormContent>
        <DynamicFormComponent TModel="ContactModel" 
                            Model="@model" 
                            Configuration="@formConfiguration"
                            OnValidSubmit="@HandleValidSubmit"
                            OnFieldChanged="@(args => HandleFieldChanged(args.fieldName, args.value))"
                            IsSubmitting="@isSubmitting"
                            ShowSubmitButton="true"
                            SubmitButtonText="Submit Information"
                            SubmittingText="Submitting..."
                            SubmitButtonClass="px-8" />
    </FormContent>
    
    <SidebarContent>
        <FormGuidelines Guidelines="@guidelines" Title="Fluent API Features" />
        
        <MudCard Elevation="2" Class="mt-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" GutterBottom="true" Class="d-flex align-items-center">
                    <MudIcon Icon="@Icons.Material.Filled.Code" Class="me-2 text-info" />
                    Fluent Methods Example
                </MudText>
                <MudPaper Class="pa-3" Elevation="1">
                    <pre style="font-size: 11px; line-height: 1.3; white-space: pre-wrap; color: #2d3748;">FormBuilder&lt;ContactModel&gt;
    .Create()
    .WithLayout(FormLayout.Horizontal)
    .AddRequiredTextField(x => x.FirstName, 
        "First Name", "Enter first name", 2)
    .AddEmailField(x => x.Email)
    .AddNumericField(x => x.Age, "Age", 16, 100)
    .AddDropdownField(x => x.Country, "Country",
        ("US", "United States"),
        ("CA", "Canada"))
    .Build();</pre>
                </MudPaper>
            </MudCardContent>
        </MudCard>
        
        <MudCard Elevation="2" Class="mt-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" GutterBottom="true" Class="d-flex align-items-center">
                    <MudIcon Icon="@Icons.Material.Filled.LiveHelp" Class="me-2 text-info" />
                    Need Help?
                </MudText>
                <MudAlert Severity="Severity.Info" Dense="true" Class="mb-2">
                    <MudText Typo="Typo.body2">
                        Having trouble? Contact our support team at 
                        <MudLink Href="mailto:support@example.com">support@example.com</MudLink>
                    </MudText>
                </MudAlert>
                <MudButton Variant="Variant.Outlined" 
                          Color="Color.Info" 
                          Size="Size.Small"
                          StartIcon="@Icons.Material.Filled.Phone"
                          FullWidth="true">
                    Call Support: 1-800-HELP
                </MudButton>
            </MudCardContent>
        </MudCard>
    </SidebarContent>
    
    <SuccessContent>
        @if (isSubmitted)
        {
            <FormSuccessDisplay TModel="ContactModel" 
                               DataDisplayItems="@GetDataDisplayItems()"
                               OnReset="@ResetForm" />
        }
    </SuccessContent>
    
</FormPageLayout>

@code {
    private ContactModel model = new();
    private bool isSubmitted;
    private bool isSubmitting;
    private List<string> fieldChanges = new();
    private IFormConfiguration<ContactModel> formConfiguration = null!;
    
    private List<FormGuidelines.GuidelineItem> guidelines = new()
    {
        new() { Icon = Icons.Material.Filled.FlashOn, Color = Color.Primary, Text = "Fluent helper methods for common fields" },
        new() { Icon = Icons.Material.Filled.Speed, Color = Color.Secondary, Text = "Streamlined form building process" },
        new() { Icon = Icons.Material.Filled.AutoAwesome, Color = Color.Tertiary, Text = "Automatic validation and layout" },
        new() { Icon = Icons.Material.Filled.Tune, Color = Color.Info, Text = "Configurable form layouts" },
        new() { Icon = Icons.Material.Filled.Security, Color = Color.Success, Text = "Built-in field validation rules" },
        new() { Icon = Icons.Material.Filled.Psychology, Color = Color.Warning, Text = "Intelligent dependency handling" }
    };
    
    protected override void OnInitialized()
    {
        // Much simpler form creation using fluent methods
        formConfiguration = FormBuilder<ContactModel>
            .Create()
            .WithLayout(FormLayout.Horizontal)
            .AddRequiredTextField(x => x.FirstName, "First Name", "Enter your first name", 2)
            .AddRequiredTextField(x => x.LastName, "Last Name", "Enter your last name", 2)
            .AddEmailField(x => x.Email)
            .AddNumericField(x => x.Age, "Age", 16, 100)
            .AddDropdownField(x => x.Country, "Country",
                ("US", "United States"),
                ("CA", "Canada"),
                ("UK", "United Kingdom"),
                ("DE", "Germany"),
                ("FR", "France")
            )
            .AddField(x => x.City)
                .WithLabel("City")
                .WithPlaceholder("Enter your city")
                .VisibleWhen(m => !string.IsNullOrEmpty(m.Country))
                .DependsOn(x => x.Country, (model, country) =>
                {
                    if (string.IsNullOrEmpty(country))
                    {
                        model.City = null;
                    }
                })
                .AddField(x => x.SubscribeToNewsletter)
                .WithLabel("Subscribe to Newsletter")
                .WithHelpText("Get updates about new features")
            .Build();
    }
    
    private async Task HandleValidSubmit(ContactModel submittedModel)
    {
        isSubmitting = true;
        StateHasChanged();
        
        // Simulate API call
        await Task.Delay(2000);
        
        isSubmitted = true;
        isSubmitting = false;
        StateHasChanged();
    }
    
    private void ResetForm()
    {
        model = new ContactModel();
        isSubmitted = false;
        isSubmitting = false;
        fieldChanges.Clear();
        StateHasChanged();
    }
    
    private Task HandleFieldChanged(string fieldName, object? value)
    {
        fieldChanges.Add($"{DateTime.Now:HH:mm:ss} - {fieldName}: {value}");
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private List<FormSuccessDisplay<ContactModel>.DataDisplayItem> GetDataDisplayItems()
    {
        var items = new List<FormSuccessDisplay<ContactModel>.DataDisplayItem>
        {
            new() { Label = "Full Name", Value = $"{model.FirstName} {model.LastName}" },
            new() { Label = "Email", Value = model.Email ?? "" },
            new() { Label = "Age", Value = $"{model.Age} years old" },
            new() { Label = "Country", Value = model.Country ?? "" }
        };
        
        if (!string.IsNullOrEmpty(model.City))
            items.Add(new() { Label = "City", Value = model.City });
            
        items.Add(new() { Label = "Newsletter", Value = model.SubscribeToNewsletter ? "Subscribed" : "Not Subscribed" });
        
        if (fieldChanges.Any())
            items.Add(new() { Label = "Field Changes", Value = $"{fieldChanges.Count} changes tracked" });
        
        return items;
    }
}