@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@implements IDisposable

@if (HasValidationErrors)
{
    <div class="mt-1">
        @foreach (var error in ValidationErrors)
        {
            <MudText Typo="Typo.caption" Color="Color.Error" Class="mt-1">
                @error
            </MudText>
        }
    </div>
}

@code {
    [Parameter] public string FieldName { get; set; } = string.Empty;
    [CascadingParameter] EditContext? EditContext { get; set; }
    
    private IEnumerable<string> ValidationErrors => 
        EditContext?.GetValidationMessages(EditContext.Field(FieldName)) ?? Enumerable.Empty<string>();
    
    private bool HasValidationErrors => ValidationErrors.Any();
    
    protected override void OnInitialized()
    {
        if (EditContext != null)
        {
            EditContext.OnValidationStateChanged += HandleValidationStateChanged;
        }
    }
    
    private void HandleValidationStateChanged(object? sender, ValidationStateChangedEventArgs e)
    {
        StateHasChanged();
    }
    
    public void Dispose()
    {
        if (EditContext != null)
        {
            EditContext.OnValidationStateChanged -= HandleValidationStateChanged;
        }
    }
}