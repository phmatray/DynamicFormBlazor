@namespace FormCraft.ForMudBlazor
@typeparam TModel where TModel : new()
@using System.Reflection
@using Microsoft.AspNetCore.Components.Forms
@inject IFieldRendererService FieldRendererService

<EditForm Model="@Model" OnValidSubmit="@OnSubmit">
    <DataAnnotationsValidator />
    <DynamicFormValidator TModel="TModel" Configuration="@Configuration" />
    
    @foreach (var field in Configuration.Fields.OrderBy(f => f.Order))
    {
        if (ShouldShowField(field))
        {
            <div class="mb-4">
                @RenderField(field)
                <FieldValidationMessage FieldName="@field.FieldName" />
            </div>
        }
    }
    
    @if (ShowSubmitButton)
    {
        <MudButton ButtonType="ButtonType.Submit"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   Disabled="@IsSubmitting">
            @(IsSubmitting ? SubmittingText : SubmitButtonText)
        </MudButton>
    }
</EditForm>

@code {
    [Parameter] public TModel Model { get; set; } = new();
    [Parameter] public IFormConfiguration<TModel> Configuration { get; set; } = null!;
    [Parameter] public EventCallback<TModel> OnValidSubmit { get; set; }
    [Parameter] public EventCallback<(string fieldName, object? value)> OnFieldChanged { get; set; }
    [Parameter] public bool ShowSubmitButton { get; set; } = true;
    [Parameter] public string SubmitButtonText { get; set; } = "Submit";
    [Parameter] public string SubmittingText { get; set; } = "Submitting...";
    [Parameter] public bool IsSubmitting { get; set; }

    private RenderFragment RenderField(IFieldConfiguration<TModel, object> field)
    {
        return builder =>
        {
            var property = typeof(TModel).GetProperty(field.FieldName);
            if (property == null) return;

            var fieldType = property.PropertyType;
            var underlyingType = Nullable.GetUnderlyingType(fieldType) ?? fieldType;
            var value = property.GetValue(Model);

            // String fields
            if (fieldType == typeof(string))
            {
                builder.OpenComponent<MudTextField<string>>(0);
                builder.AddAttribute(1, "Label", field.Label);
                builder.AddAttribute(2, "Value", value);
                builder.AddAttribute(3, "ValueChanged", EventCallback.Factory.Create<string>(this, newValue => UpdateFieldValue(field.FieldName, newValue)));
                builder.AddAttribute(4, "Placeholder", field.Placeholder);
                builder.AddAttribute(5, "HelperText", field.HelpText);
                builder.AddAttribute(6, "Required", field.IsRequired);
                builder.AddAttribute(7, "ReadOnly", field.IsReadOnly);
                builder.AddAttribute(8, "Disabled", field.IsDisabled);
                builder.AddAttribute(9, "Variant", Variant.Outlined);
                builder.AddAttribute(10, "Margin", Margin.Dense);
                builder.AddAttribute(11, "Immediate", true);
                builder.CloseComponent();
            }
            // Integer fields
            else if (underlyingType == typeof(int))
            {
                builder.OpenComponent<MudNumericField<int>>(0);
                builder.AddAttribute(1, "Label", field.Label);
                builder.AddAttribute(2, "Value", value ?? 0);
                builder.AddAttribute(3, "ValueChanged", EventCallback.Factory.Create<int>(this, newValue => UpdateFieldValue(field.FieldName, newValue)));
                builder.AddAttribute(4, "Placeholder", field.Placeholder);
                builder.AddAttribute(5, "HelperText", field.HelpText);
                builder.AddAttribute(6, "Required", field.IsRequired);
                builder.AddAttribute(7, "ReadOnly", field.IsReadOnly);
                builder.AddAttribute(8, "Disabled", field.IsDisabled);
                builder.AddAttribute(9, "Variant", Variant.Outlined);
                builder.AddAttribute(10, "Margin", Margin.Dense);
                builder.CloseComponent();
            }
            // Decimal fields
            else if (underlyingType == typeof(decimal))
            {
                builder.OpenComponent<MudNumericField<decimal>>(0);
                builder.AddAttribute(1, "Label", field.Label);
                builder.AddAttribute(2, "Value", value ?? 0m);
                builder.AddAttribute(3, "ValueChanged", EventCallback.Factory.Create<decimal>(this, newValue => UpdateFieldValue(field.FieldName, newValue)));
                builder.AddAttribute(4, "Placeholder", field.Placeholder);
                builder.AddAttribute(5, "HelperText", field.HelpText);
                builder.AddAttribute(6, "Required", field.IsRequired);
                builder.AddAttribute(7, "ReadOnly", field.IsReadOnly);
                builder.AddAttribute(8, "Disabled", field.IsDisabled);
                builder.AddAttribute(9, "Variant", Variant.Outlined);
                builder.AddAttribute(10, "Margin", Margin.Dense);
                builder.CloseComponent();
            }
            // Double fields
            else if (underlyingType == typeof(double))
            {
                builder.OpenComponent<MudNumericField<double>>(0);
                builder.AddAttribute(1, "Label", field.Label);
                builder.AddAttribute(2, "Value", value ?? 0.0);
                builder.AddAttribute(3, "ValueChanged", EventCallback.Factory.Create<double>(this, newValue => UpdateFieldValue(field.FieldName, newValue)));
                builder.AddAttribute(4, "Placeholder", field.Placeholder);
                builder.AddAttribute(5, "HelperText", field.HelpText);
                builder.AddAttribute(6, "Required", field.IsRequired);
                builder.AddAttribute(7, "ReadOnly", field.IsReadOnly);
                builder.AddAttribute(8, "Disabled", field.IsDisabled);
                builder.AddAttribute(9, "Variant", Variant.Outlined);
                builder.AddAttribute(10, "Margin", Margin.Dense);
                builder.CloseComponent();
            }
            // Boolean fields
            else if (underlyingType == typeof(bool))
            {
                builder.OpenComponent<MudCheckBox<bool>>(0);
                builder.AddAttribute(1, "Label", field.Label);
                builder.AddAttribute(2, "Value", value ?? false);
                builder.AddAttribute(3, "ValueChanged", EventCallback.Factory.Create<bool>(this, newValue => UpdateFieldValue(field.FieldName, newValue)));
                builder.AddAttribute(4, "ReadOnly", field.IsReadOnly);
                builder.AddAttribute(5, "Disabled", field.IsDisabled);
                builder.CloseComponent();
            }
            // DateTime fields
            else if (underlyingType == typeof(DateTime))
            {
                builder.OpenComponent<MudDatePicker>(0);
                builder.AddAttribute(1, "Label", field.Label);
                builder.AddAttribute(2, "Date", value as DateTime?);
                builder.AddAttribute(3, "DateChanged", EventCallback.Factory.Create<DateTime?>(this, newValue => UpdateFieldValue(field.FieldName, newValue)));
                builder.AddAttribute(4, "Placeholder", field.Placeholder);
                builder.AddAttribute(5, "HelperText", field.HelpText);
                builder.AddAttribute(6, "Required", field.IsRequired);
                builder.AddAttribute(7, "ReadOnly", field.IsReadOnly);
                builder.AddAttribute(8, "Disabled", field.IsDisabled);
                builder.AddAttribute(9, "Variant", Variant.Outlined);
                builder.AddAttribute(10, "Margin", Margin.Dense);
                builder.CloseComponent();
            }
            // File upload fields
            else if (fieldType == typeof(IBrowserFile) || fieldType == typeof(IReadOnlyList<IBrowserFile>))
            {
                builder.OpenComponent<MudFileUpload<IBrowserFile>>(0);
                builder.AddAttribute(1, "T", typeof(IBrowserFile));
                builder.AddAttribute(2, "OnFilesChanged", EventCallback.Factory.Create<InputFileChangeEventArgs>(this, args => HandleFileUpload(field.FieldName, args)));
                builder.AddAttribute(3, "Accept", field.AdditionalAttributes.TryGetValue("Accept", out var accept) ? accept : "*/*");
                builder.AddAttribute(4, "Disabled", field.IsDisabled);
                builder.AddAttribute(5, "ChildContent", (RenderFragment)(contentBuilder =>
                {
                    contentBuilder.OpenComponent<MudButton>(0);
                    contentBuilder.AddAttribute(1, "HtmlTag", "label");
                    contentBuilder.AddAttribute(2, "Variant", Variant.Filled);
                    contentBuilder.AddAttribute(3, "Color", Color.Primary);
                    contentBuilder.AddAttribute(4, "StartIcon", Icons.Material.Filled.CloudUpload);
                    contentBuilder.AddAttribute(5, "for", field.FieldName);
                    contentBuilder.AddAttribute(6, "ChildContent", (RenderFragment)(buttonBuilder =>
                    {
                        buttonBuilder.AddContent(0, field.Label ?? "Upload File");
                    }));
                    contentBuilder.CloseComponent();
                }));
                builder.CloseComponent();
            }
            // Select fields (if field has options in additional attributes)
            else if (field.AdditionalAttributes.TryGetValue("Options", out var optionsObj) && optionsObj != null)
            {
                builder.OpenComponent<MudSelect<string>>(0);
                builder.AddAttribute(1, "Label", field.Label);
                builder.AddAttribute(2, "Value", value?.ToString() ?? string.Empty);
                builder.AddAttribute(3, "ValueChanged", EventCallback.Factory.Create<string>(this, newValue => UpdateFieldValue(field.FieldName, newValue)));
                builder.AddAttribute(4, "Placeholder", field.Placeholder);
                builder.AddAttribute(5, "HelperText", field.HelpText);
                builder.AddAttribute(6, "Required", field.IsRequired);
                builder.AddAttribute(7, "ReadOnly", field.IsReadOnly);
                builder.AddAttribute(8, "Disabled", field.IsDisabled);
                builder.AddAttribute(9, "Variant", Variant.Outlined);
                builder.AddAttribute(10, "Margin", Margin.Dense);
                builder.AddAttribute(11, "ChildContent", (RenderFragment)((childBuilder) =>
                {
                    var sequence = 0;
                    if (optionsObj is IEnumerable<SelectOption<string>> stringOptions)
                    {
                        foreach (var option in stringOptions)
                        {
                            childBuilder.OpenComponent<MudSelectItem<string>>(sequence++);
                            childBuilder.AddAttribute(sequence++, "Value", option.Value);
                            childBuilder.AddAttribute(sequence++, "ChildContent", (RenderFragment)((itemBuilder) =>
                            {
                                itemBuilder.AddContent(0, option.Label);
                            }));
                            childBuilder.CloseComponent();
                        }
                    }
                    else if (optionsObj is System.Collections.IEnumerable options)
                    {
                        // Handle generic options
                        foreach (var option in options)
                        {
                            var optionType = option.GetType();
                            var valueProperty = optionType.GetProperty("Value");
                            var labelProperty = optionType.GetProperty("Label");
                            
                            if (valueProperty != null && labelProperty != null)
                            {
                                var optionValue = valueProperty.GetValue(option)?.ToString() ?? "";
                                var optionLabel = labelProperty.GetValue(option)?.ToString() ?? "";
                                
                                childBuilder.OpenComponent<MudSelectItem<string>>(sequence++);
                                childBuilder.AddAttribute(sequence++, "Value", optionValue);
                                childBuilder.AddAttribute(sequence++, "ChildContent", (RenderFragment)((itemBuilder) =>
                                {
                                    itemBuilder.AddContent(0, optionLabel);
                                }));
                                childBuilder.CloseComponent();
                            }
                        }
                    }
                }));
                builder.CloseComponent();
            }
            // Add custom renderer support
            else if (field.CustomRendererType != null)
            {
                // Use the existing field renderer service for custom renderers
                var context = new FieldRenderContext<TModel>
                {
                    Model = Model,
                    Field = field,
                    ActualFieldType = fieldType,
                    CurrentValue = value,
                    OnValueChanged = EventCallback.Factory.Create<object?>(this, val => UpdateFieldValue(field.FieldName, val)),
                    OnDependencyChanged = EventCallback.Factory.Create(this, () => HandleFieldDependencyChanged(field.FieldName))
                };
                builder.AddContent(0, FieldRendererService.RenderField(Model, field, context.OnValueChanged, context.OnDependencyChanged));
            }
        };
    }

    private async Task UpdateFieldValue(string fieldName, object? value)
    {
        var property = typeof(TModel).GetProperty(fieldName);
        if (property != null)
        {
            property.SetValue(Model, value);
            
            if (OnFieldChanged.HasDelegate)
            {
                await OnFieldChanged.InvokeAsync((fieldName, value));
            }
            
            // Handle dependencies
            await HandleFieldDependencyChanged(fieldName);
            
            StateHasChanged();
        }
    }

    private async Task HandleFileUpload(string fieldName, InputFileChangeEventArgs args)
    {
        var property = typeof(TModel).GetProperty(fieldName);
        if (property != null)
        {
            if (property.PropertyType == typeof(IBrowserFile))
            {
                await UpdateFieldValue(fieldName, args.File);
            }
            else if (property.PropertyType == typeof(IReadOnlyList<IBrowserFile>))
            {
                await UpdateFieldValue(fieldName, args.GetMultipleFiles());
            }
        }
    }

    private async Task HandleFieldDependencyChanged(string fieldName)
    {
        if (Configuration.FieldDependencies.TryGetValue(fieldName, out var dependencies))
        {
            foreach (var dependency in dependencies)
            {
                dependency.OnDependencyChanged(Model);
            }
        }
    }

    private bool ShouldShowField(IFieldConfiguration<TModel, object> field)
    {
        if (field.VisibilityCondition != null)
        {
            return field.VisibilityCondition(Model);
        }
        return field.IsVisible;
    }

    private Task OnSubmit()
    {
        if (OnValidSubmit.HasDelegate)
        {
            return OnValidSubmit.InvokeAsync(Model);
        }
        return Task.CompletedTask;
    }
}