@page "/improved"
@inject IFieldRendererService FieldRendererService
@inject FormCodeGeneratorService CodeGenerator

<PageTitle>Improved Dynamic Form API</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="py-6">
    <MudText Typo="Typo.h3" GutterBottom="true" Class="mb-2">
        <MudIcon Icon="@Icons.Material.Filled.Engineering" Class="me-2" Style="vertical-align: bottom;" />
        Improved Dynamic Form API
    </MudText>
    <MudText Typo="Typo.body1" GutterBottom="true" Class="mb-6">
        This demonstrates the new type-safe, feature-rich dynamic form API with validation, dependencies, and advanced field configuration.
    </MudText>
    
    <MudPaper Elevation="2" Class="pa-0">
        <MudTabs Elevation="0" Rounded="false" PanelClass="pa-6">
            <MudTabPanel Text="Form Demo" Icon="@Icons.Material.Filled.Build">
                <MudGrid>
                    <MudItem xs="12" lg="8">
                        <MudPaper Elevation="1" Class="pa-6">
                            <MudText Typo="Typo.h5" GutterBottom="true" Class="mb-4 d-flex align-items-center">
                                <MudIcon Icon="@Icons.Material.Filled.FactCheck" Class="me-2" />
                                Type-Safe Form Builder
                            </MudText>
                            
                            @if (_isSubmitted)
                            {
                                <FormSuccessDisplay TModel="ContactModel" 
                                                   DataDisplayItems="@GetDataDisplayItems()"
                                                   OnReset="@ResetForm" />
                            }
                            else
                            {
                                <EditForm Model="@_model" OnValidSubmit="@HandleValidSubmit">
                                    <DataAnnotationsValidator />
                                    
                                    @foreach (var field in _formConfiguration.Fields.OrderBy(f => f.Order))
                                    {
                                        @if (ShouldShowField(field))
                                        {
                                            <div class="mb-4">
                                                @FieldRendererService.RenderField(_model, field, 
                                                    EventCallback.Factory.Create<object?>(this, value => SetFieldValue(field.FieldName, value)),
                                                    EventCallback.Factory.Create(this, () => HandleFieldDependencies(field.FieldName)))
                                            </div>
                                        }
                                    }
                                    
                                    <MudCardActions Class="justify-center pa-4">
                                        <MudButton ButtonType="ButtonType.Submit"
                                                  Variant="Variant.Filled"
                                                  Color="Color.Primary"
                                                  Size="Size.Large"
                                                  Disabled="@_isSubmitting"
                                                  StartIcon="@(_isSubmitting ? Icons.Material.Filled.HourglassEmpty : Icons.Material.Filled.Send)"
                                                  Class="px-8">
                                            @if (_isSubmitting)
                                            {
                                                <MudProgressCircular Class="me-2" Size="Size.Small" Indeterminate="true" />
                                                <span>Submitting...</span>
                                            }
                                            else
                                            {
                                                <span>Submit Application</span>
                                            }
                                        </MudButton>
                                    </MudCardActions>
                                </EditForm>
                            }
                        </MudPaper>
                    </MudItem>
                    
                    <MudItem xs="12" lg="4">
                        <FormGuidelines Guidelines="@_guidelines" Title="API Features" />
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
            
            <MudTabPanel Text="Code Example" Icon="@Icons.Material.Filled.Code">
                <CodeExample Title="Type-Safe Form Configuration" Language="csharp" Code="@GetGeneratedCode()" />
            </MudTabPanel>
        </MudTabs>
    </MudPaper>
</MudContainer>

@code {
    private ContactModel _model = new();
    private bool _isSubmitted;
    private bool _isSubmitting;
    private IFormConfiguration<ContactModel> _formConfiguration = null!;
    
    private List<FormGuidelines.GuidelineItem> _guidelines = new()
    {
        new() { Icon = Icons.Material.Filled.Security, Color = Color.Primary, Text = "Type-safe form builder API" },
        new() { Icon = Icons.Material.Filled.Verified, Color = Color.Secondary, Text = "Fluent validation integration" },
        new() { Icon = Icons.Material.Filled.AccountTree, Color = Color.Tertiary, Text = "Field dependencies & visibility" },
        new() { Icon = Icons.Material.Filled.AutoAwesome, Color = Color.Info, Text = "Automatic field rendering" },
        new() { Icon = Icons.Material.Filled.Extension, Color = Color.Success, Text = "Extensible with custom validators" },
        new() { Icon = Icons.Material.Filled.Speed, Color = Color.Warning, Text = "Real-time validation feedback" }
    };
    
    protected override void OnInitialized()
    {
        // This is our improved API in action!
        _formConfiguration = FormBuilder<ContactModel>
            .Create()
            .AddField(x => x.FirstName)
                .WithLabel("First Name")
                .Required("First name is required")
                .WithMinLength(2, "Must be at least 2 characters")
                .WithPlaceholder("Enter your first name")
            .AddField(x => x.LastName)
                .WithLabel("Last Name")
                .Required("Last name is required")
                .WithMinLength(2, "Must be at least 2 characters")
                .WithPlaceholder("Enter your last name")
            .AddField(x => x.Email)
                .WithLabel("Email Address")
                .Required("Email is required")
                .WithEmailValidation()
                .WithPlaceholder("your.email@example.com")
            .AddField(x => x.Age)
                .WithLabel("Age")
                .Required("Age is required")
                .WithRange(16, 100, "Age must be between 16 and 100")
            .AddField(x => x.Country)
                .WithLabel("Country")
                .Required("Please select your country")
                .WithOptions(
                    ("US", "United States"),
                    ("CA", "Canada"),
                    ("UK", "United Kingdom"),
                    ("DE", "Germany"),
                    ("FR", "France")
                )
            .AddField(x => x.City)
                .WithLabel("City")
                .WithPlaceholder("Enter your city")
                .VisibleWhen(m => !string.IsNullOrEmpty(m.Country))
                .DependsOn(x => x.Country, (model, country) =>
                {
                    if (string.IsNullOrEmpty(country))
                    {
                        model.City = null;
                    }
                })
            .AddField(x => x.SubscribeToNewsletter)
                .WithLabel("Subscribe to Newsletter")
                .WithHelpText("Get updates about new features")
            .Build();
    }
    
    private bool ShouldShowField(IFieldConfiguration<ContactModel, object> field)
    {
        if (field.VisibilityCondition != null)
        {
            return field.VisibilityCondition(_model);
        }
        return field.IsVisible;
    }
    
    
    private void SetFieldValue(string fieldName, object? value)
    {
        var property = typeof(ContactModel).GetProperty(fieldName);
        property?.SetValue(_model, value);
        StateHasChanged();
    }
    
    private void HandleFieldDependencies(string changedFieldName)
    {
        if (_formConfiguration.FieldDependencies.TryGetValue(changedFieldName, out var dependencies))
        {
            foreach (var dependency in dependencies)
            {
                dependency.OnDependencyChanged(_model);
            }
            StateHasChanged();
        }
    }
    
    private async Task HandleValidSubmit()
    {
        _isSubmitting = true;
        
        // Simulate API call
        await Task.Delay(2000);
        
        _isSubmitted = true;
        _isSubmitting = false;
        StateHasChanged();
    }
    
    private void ResetForm()
    {
        _model = new ContactModel();
        _isSubmitted = false;
        StateHasChanged();
    }
    
    private List<FormSuccessDisplay<ContactModel>.DataDisplayItem> GetDataDisplayItems()
    {
        var items = new List<FormSuccessDisplay<ContactModel>.DataDisplayItem>
        {
            new() { Label = "Full Name", Value = $"{_model.FirstName} {_model.LastName}" },
            new() { Label = "Email", Value = _model.Email },
            new() { Label = "Age", Value = _model.Age.ToString() },
            new() { Label = "Country", Value = _model.Country }
        };
        
        if (!string.IsNullOrEmpty(_model.City))
            items.Add(new() { Label = "City", Value = _model.City });
            
        items.Add(new() { Label = "Newsletter", Value = _model.SubscribeToNewsletter ? "Yes" : "No" });
        
        return items;
    }
    
    private string GetGeneratedCode()
    {
        var formCode = CodeGenerator.GenerateFormBuilderCode(_formConfiguration);
        
        // Add usage example for manual rendering
        var usageExample = @"

// Manual rendering with EditForm
<EditForm Model=""@_model"" OnValidSubmit=""@HandleValidSubmit"">
    <DataAnnotationsValidator />
    
    @foreach (var field in _formConfiguration.Fields.OrderBy(f => f.Order))
    {
        @if (ShouldShowField(field))
        {
            <div class=""mb-4"">
                @FieldRendererService.RenderField(_model, field, 
                    EventCallback.Factory.Create<object?>(this, value => SetFieldValue(field.FieldName, value)),
                    EventCallback.Factory.Create(this, () => HandleFieldDependencies(field.FieldName)))
            </div>
        }
    }
    
    <MudButton ButtonType=""ButtonType.Submit"" Variant=""Variant.Filled"" Color=""Color.Primary"">
        Submit
    </MudButton>
</EditForm>";
        
        return formCode + usageExample;
    }
}