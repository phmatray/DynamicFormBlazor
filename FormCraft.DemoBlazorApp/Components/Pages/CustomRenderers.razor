@page "/custom-renderers"
@inject FormCodeGeneratorService CodeGenerator

<PageTitle>Custom Field Renderers</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="py-6">
    <MudText Typo="Typo.h3" GutterBottom="true" Class="mb-2">
        <MudIcon Icon="@Icons.Material.Filled.Palette" Style="vertical-align: middle; font-size: 3rem" />
        Custom Field Renderers
    </MudText>
    <MudText Typo="Typo.body1" GutterBottom="true" Class="mb-6">
        This demonstrates how to use custom field renderers for specialized input types like color pickers and ratings.
    </MudText>
    
    <MudPaper Elevation="2" Class="pa-0">
        <MudTabs Elevation="0" Rounded="false" PanelClass="pa-6">
            <MudTabPanel Text="Form Demo" Icon="@Icons.Material.Filled.ViewQuilt">
                <MudGrid>
                    <MudItem xs="12" lg="8">
                        <MudPaper Elevation="1" Class="pa-6">
                            <MudText Typo="Typo.h5" GutterBottom="true" Class="mb-4 d-flex align-items-center">
                                <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Class="me-2" />
                                Product Information
                            </MudText>
                            
                            @if (_isSubmitted)
                            {
                                <FormSuccessDisplay DataDisplayItems="@GetDataDisplayItems()"
                                                   OnReset="@ResetForm" />
                            }
                            else
                            {
                                <DynamicFormComponent TModel="ProductModel" 
                                                    Model="@_model" 
                                                    Configuration="@_formConfiguration"
                                                    OnValidSubmit="@HandleValidSubmit"
                                                    IsSubmitting="@_isSubmitting"
                                                    SubmitButtonText="Save Product"
                                                    SubmittingText="Saving..." />
                            }
                        </MudPaper>
                    </MudItem>
                    
                    <MudItem xs="12" lg="4">
                        <FormGuidelines Guidelines="@_guidelines" Title="Custom Renderer Features" />
                        
                        <MudCard Elevation="2" Class="mt-4">
                            <MudCardContent>
                                <MudText Typo="Typo.h6" GutterBottom="true" Class="d-flex align-items-center">
                                    <MudIcon Icon="@Icons.Material.Filled.Code" Class="me-2" />
                                    Usage
                                </MudText>
                                <MudText Typo="Typo.body2" Class="mb-2">
                                    Custom renderers allow you to create specialized input controls for specific data types:
                                </MudText>
                                <MudList T="string" Dense="true">
                                    <MudListItem T="string" Icon="@Icons.Material.Filled.ColorLens">
                                        Color Picker for color selection
                                    </MudListItem>
                                    <MudListItem T="string" Icon="@Icons.Material.Filled.Star">
                                        Rating control for numeric ratings
                                    </MudListItem>
                                    <MudListItem T="string" Icon="@Icons.Material.Filled.Extension">
                                        Extensible for any custom input type
                                    </MudListItem>
                                </MudList>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
            
            <MudTabPanel Text="Code Example" Icon="@Icons.Material.Filled.Code">
                <CodeExample Title="Custom Renderer Configuration" Language="csharp" Code="@GetGeneratedCode()" />
            </MudTabPanel>
            
            <MudTabPanel Text="Guidelines" Icon="@Icons.Material.Filled.Lightbulb">
                <FormGuidelines Title="Custom Renderer Guidelines">
                    <MudSimpleTable>
                        <thead>
                            <tr>
                                <th>Feature</th>
                                <th>Usage</th>
                                <th>Example</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Color Picker</td>
                                <td>Visual color selection control</td>
                                <td><code>.WithCustomRenderer&lt;TModel, string, ColorPickerRenderer&gt;()</code></td>
                            </tr>
                            <tr>
                                <td>Rating Control</td>
                                <td>Star-based rating input</td>
                                <td><code>.WithCustomRenderer&lt;TModel, int, RatingRenderer&gt;()</code></td>
                            </tr>
                            <tr>
                                <td>Custom Attributes</td>
                                <td>Pass parameters to renderers</td>
                                <td><code>.WithAttribute("MaxRating", 5)</code></td>
                            </tr>
                            <tr>
                                <td>Help Text</td>
                                <td>Provide user guidance</td>
                                <td><code>.WithHelpText("Select the primary color")</code></td>
                            </tr>
                            <tr>
                                <td>Creating Renderers</td>
                                <td>Implement ICustomFieldRenderer</td>
                                <td><code>public class MyRenderer : ICustomFieldRenderer</code></td>
                            </tr>
                        </tbody>
                    </MudSimpleTable>
                </FormGuidelines>
            </MudTabPanel>
        </MudTabs>
    </MudPaper>
</MudContainer>

@code {
    private ProductModel _model = new();
    private IFormConfiguration<ProductModel> _formConfiguration = default!;
    private bool _isSubmitting;
    private bool _isSubmitted;
    
    private readonly List<FormGuidelines.GuidelineItem> _guidelines = new()
    {
        new() { Text = "Color picker provides visual color selection", Icon = Icons.Material.Filled.ColorLens },
        new() { Text = "Rating control offers intuitive star-based input", Icon = Icons.Material.Filled.Star },
        new() { Text = "Custom renderers integrate seamlessly with validation", Icon = Icons.Material.Filled.CheckCircle },
        new() { Text = "Easily create your own renderers for specific needs", Icon = Icons.Material.Filled.Extension }
    };
    
    protected override void OnInitialized()
    {
        _formConfiguration = FormBuilder<ProductModel>
            .Create()
            .AddFieldGroup(group => group
                .WithGroupName("Basic Information")
                .WithColumns(2)
                .AddField(x => x.Name, field => field
                    .WithLabel("Product Name")
                    .Required()
                    .WithPlaceholder("Enter product name"))
                .AddField(x => x.Category, field => field
                    .WithLabel("Category")
                    .Required()
                    .WithOptions(
                        ("electronics", "Electronics"),
                        ("clothing", "Clothing"),
                        ("books", "Books"),
                        ("home", "Home & Garden")
                    )))
            .AddFieldGroup(group => group
                .WithGroupName("Details")
                .WithColumns(2)
                .AddField(x => x.Price, field => field
                    .WithLabel("Price")
                    .Required()
                    .WithPlaceholder("0.00"))
                .AddField(x => x.ReleaseDate, field => field
                    .WithLabel("Release Date")))
            .AddFieldGroup(group => group
                .WithGroupName("Appearance & Rating")
                .WithColumns(2)
                .ShowInCard()
                .AddField(x => x.Color, field => field
                    .WithLabel("Product Color")
                    .WithCustomRenderer<ProductModel, string, ColorPickerRenderer>()
                    .WithHelpText("Select the primary color of the product"))
                .AddField(x => x.Rating, field => field
                    .WithLabel("Quality Rating")
                    .WithCustomRenderer<ProductModel, int, RatingRenderer>()
                    .WithAttribute("MaxRating", 5)
                    .WithHelpText("Rate the product quality from 1 to 5 stars")))
            .AddField(x => x.Description)
                .WithLabel("Description")
                .AsTextArea(lines: 4)
                .WithPlaceholder("Enter product description")
            .AddField(x => x.InStock)
                .WithLabel("In Stock")
            .Build();
    }
    
    private async Task HandleValidSubmit()
    {
        _isSubmitting = true;
        StateHasChanged();
        
        // Simulate API call
        await Task.Delay(2000);
        
        _isSubmitted = true;
        _isSubmitting = false;
        StateHasChanged();
    }
    
    private void ResetForm()
    {
        _model = new ProductModel();
        _isSubmitted = false;
        StateHasChanged();
    }
    
    private List<FormSuccessDisplay.DataDisplayItem> GetDataDisplayItems()
    {
        return new List<FormSuccessDisplay.DataDisplayItem>
        {
            new() { Label = "Product Name", Value = _model.Name },
            new() { Label = "Category", Value = _model.Category },
            new() { Label = "Price", Value = $"${_model.Price:F2}" },
            new() { Label = "Color", Value = _model.Color },
            new() { Label = "Rating", Value = $"{_model.Rating} / 5 stars" },
            new() { Label = "In Stock", Value = _model.InStock ? "Yes" : "No" },
            new() { Label = "Release Date", Value = _model.ReleaseDate.ToShortDateString() }
        };
    }
    
    private string GetGeneratedCode()
    {
        // Generate code from the actual form configuration
        return CodeGenerator.GenerateFormBuilderCode(_formConfiguration);
    }
}