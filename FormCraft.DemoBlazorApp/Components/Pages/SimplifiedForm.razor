@page "/simplified"
@inject FormCodeGeneratorService CodeGenerator

<PageTitle>Simplified Dynamic Form API</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="py-6">
    <MudText Typo="Typo.h3" GutterBottom="true" Class="mb-2">
        <MudIcon Icon="@Icons.Material.Filled.AutoFixHigh" Style="vertical-align: middle; font-size: 3rem" />
        Simplified Dynamic Form API
    </MudText>
    <MudText Typo="Typo.body1" GutterBottom="true" Class="mb-6">
        This demonstrates the simplified API that hides complexity from users while providing powerful features.
    </MudText>
    
    <MudPaper Elevation="2" Class="pa-0">
        <MudTabs Elevation="0" Rounded="false" PanelClass="pa-6">
            <MudTabPanel Text="Form Demo" Icon="@Icons.Material.Filled.Assignment">
                <MudGrid>
                    <MudItem xs="12" lg="8">
                        <MudPaper Elevation="1" Class="pa-6">
                            <MudText Typo="Typo.h5" GutterBottom="true" Class="mb-4 d-flex align-items-center">
                                <MudIcon Icon="@Icons.Material.Filled.ContactPage" Class="me-2" />
                                Contact Form Example
                            </MudText>
                            
                            @if (_isSubmitted)
                            {
                                <FormSuccessDisplay DataDisplayItems="@GetDataDisplayItems()"
                                                   OnReset="@ResetForm" />
                            }
                            else
                            {
                                <FormCraftComponent TModel="ContactModel" 
                                                    Model="@_model" 
                                                    Configuration="@_formConfiguration"
                                                    OnValidSubmit="@HandleValidSubmit"
                                                    OnFieldChanged="@((args) => HandleFieldChanged(args.fieldName, args.value))"
                                                    IsSubmitting="@_isSubmitting" />
                                
                                @if (_fieldChanges.Any())
                                {
                                    <MudCard Class="mt-4" Elevation="2">
                                        <MudCardContent>
                                            <MudText Typo="Typo.h6" GutterBottom="true" Class="d-flex align-items-center">
                                                <MudIcon Icon="@Icons.Material.Filled.Timeline" Class="me-2 text-info" />
                                                Field Changes Log
                                            </MudText>
                                            <MudList T="string" Dense="true">
                                                @foreach (var change in _fieldChanges.TakeLast(5))
                                                {
                                                    <MudListItem T="string" Icon="@Icons.Material.Filled.Update" IconColor="Color.Secondary">
                                                        <MudText Typo="Typo.body2">@change</MudText>
                                                    </MudListItem>
                                                }
                                            </MudList>
                                        </MudCardContent>
                                    </MudCard>
                                }
                            }
                        </MudPaper>
                    </MudItem>
                    
                    <MudItem xs="12" lg="4">
                        <FormGuidelines Guidelines="@_guidelines" Title="Simplified API Benefits" />
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
            
            <MudTabPanel Text="Code Example" Icon="@Icons.Material.Filled.Code">
                <CodeExample Title="Complete Form Configuration" Language="csharp" Code="@GetGeneratedCode()" />
            </MudTabPanel>
            
            <MudTabPanel Text="Guidelines" Icon="@Icons.Material.Filled.Lightbulb">
                <FormGuidelines Title="Simplified API Guidelines">
                    <MudSimpleTable>
                        <thead>
                            <tr>
                                <th>Feature</th>
                                <th>Usage</th>
                                <th>Example</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Dynamic Component</td>
                                <td>Single component for complete forms</td>
                                <td><code>&lt;FormCraftComponent TModel="ContactModel" /&gt;</code></td>
                            </tr>
                            <tr>
                                <td>Field Events</td>
                                <td>Track field changes in real-time</td>
                                <td><code>OnFieldChanged="@@(args => HandleFieldChanged(...))"</code></td>
                            </tr>
                            <tr>
                                <td>Submit Handling</td>
                                <td>Async form submission support</td>
                                <td><code>OnValidSubmit="@@HandleValidSubmit"</code></td>
                            </tr>
                            <tr>
                                <td>Loading States</td>
                                <td>Built-in loading indicators</td>
                                <td><code>IsSubmitting="@@_isSubmitting"</code></td>
                            </tr>
                            <tr>
                                <td>Automatic Binding</td>
                                <td>Two-way binding out of the box</td>
                                <td>No manual binding code needed</td>
                            </tr>
                        </tbody>
                    </MudSimpleTable>
                </FormGuidelines>
            </MudTabPanel>
        </MudTabs>
    </MudPaper>
</MudContainer>

@code {
    private ContactModel _model = new();
    private bool _isSubmitted;
    private bool _isSubmitting;
    private List<string> _fieldChanges = new();
    private IFormConfiguration<ContactModel> _formConfiguration = null!;
    
    private List<FormGuidelines.GuidelineItem> _guidelines = new()
    {
        new() { Icon = Icons.Material.Filled.Widgets, Color = Color.Primary, Text = "Single component handles all rendering" },
        new() { Icon = Icons.Material.Filled.AutoAwesome, Color = Color.Secondary, Text = "Automatic field value binding" },
        new() { Icon = Icons.Material.Filled.AccountTree, Color = Color.Tertiary, Text = "Built-in dependency handling" },
        new() { Icon = Icons.Material.Filled.CodeOff, Color = Color.Info, Text = "No manual RenderTreeBuilder code" },
        new() { Icon = Icons.Material.Filled.Extension, Color = Color.Success, Text = "Extension methods for validation" },
        new() { Icon = Icons.Material.Filled.Speed, Color = Color.Warning, Text = "Real-time field change tracking" }
    };
    
    
    protected override void OnInitialized()
    {
        // Much simpler configuration setup
        _formConfiguration = FormBuilder<ContactModel>
            .Create()
            .AddField(x => x.FirstName)
                .WithLabel("First Name")
                .Required("First name is required")
                .WithMinLength(2, "Must be at least 2 characters")
                .WithPlaceholder("Enter your first name")
            .AddField(x => x.LastName)
                .WithLabel("Last Name")
                .Required("Last name is required")
                .WithMinLength(2, "Must be at least 2 characters")
                .WithPlaceholder("Enter your last name")
            .AddField(x => x.Email)
                .WithLabel("Email Address")
                .Required("Email is required")
                .WithEmailValidation()
                .WithPlaceholder("your.email@example.com")
            .AddField(x => x.Age)
                .WithLabel("Age")
                .Required("Age is required")
                .WithRange(16, 100, "Age must be between 16 and 100")
            .AddField(x => x.Country)
                .WithLabel("Country")
                .Required("Please select your country")
                .WithOptions(
                    ("US", "United States"),
                    ("CA", "Canada"),
                    ("UK", "United Kingdom"),
                    ("DE", "Germany"),
                    ("FR", "France")
                )
            .AddField(x => x.City)
                .WithLabel("City")
                .WithPlaceholder("Enter your city")
                .VisibleWhen(m => !string.IsNullOrEmpty(m.Country))
                .DependsOn(x => x.Country, (model, country) =>
                {
                    if (string.IsNullOrEmpty(country))
                    {
                        model.City = null;
                    }
                })
            .AddField(x => x.SubscribeToNewsletter)
                .WithLabel("Subscribe to Newsletter")
                .WithHelpText("Get updates about new features")
            .Build();
    }
    
    private async Task HandleValidSubmit(ContactModel submittedModel)
    {
        _isSubmitting = true;
        StateHasChanged();
        
        // Simulate API call
        await Task.Delay(2000);
        
        _isSubmitted = true;
        _isSubmitting = false;
        StateHasChanged();
    }
    
    private Task HandleFieldChanged(string fieldName, object? value)
    {
        _fieldChanges.Add($"{DateTime.Now:HH:mm:ss} - {fieldName}: {value}");
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private void ResetForm()
    {
        _model = new ContactModel();
        _isSubmitted = false;
        _fieldChanges.Clear();
        StateHasChanged();
    }
    
    private List<FormSuccessDisplay.DataDisplayItem> GetDataDisplayItems()
    {
        var items = new List<FormSuccessDisplay.DataDisplayItem>
        {
            new() { Label = "Full Name", Value = $"{_model.FirstName} {_model.LastName}" },
            new() { Label = "Email", Value = _model.Email },
            new() { Label = "Age", Value = _model.Age.ToString() },
            new() { Label = "Country", Value = _model.Country }
        };
        
        if (!string.IsNullOrEmpty(_model.City))
            items.Add(new() { Label = "City", Value = _model.City });
            
        items.Add(new() { Label = "Newsletter", Value = _model.SubscribeToNewsletter ? "Yes" : "No" });
        
        if (_fieldChanges.Any())
            items.Add(new() { Label = "Field Changes", Value = $"{_fieldChanges.Count} changes tracked" });
        
        return items;
    }
    
    private string GetGeneratedCode()
    {
        var formCode = CodeGenerator.GenerateFormBuilderCode(_formConfiguration);
        
        // Add usage example
        const string usageExample = @"

// Use in Razor component
<FormCraftComponent TModel=""ContactModel"" 
    Model=""@_model"" 
    Configuration=""@_formConfiguration""
    OnValidSubmit=""@HandleValidSubmit""
    OnFieldChanged=""@(args => HandleFieldChanged(args.fieldName, args.value))"" />";
        
        return formCode + usageExample;
    }
}