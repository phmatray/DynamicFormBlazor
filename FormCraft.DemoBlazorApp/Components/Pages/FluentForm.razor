@page "/fluent"
@inject FormCodeGeneratorService CodeGenerator

<PageTitle>Fluent API Dynamic Form</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="py-6">
    <MudText Typo="Typo.h3" GutterBottom="true" Class="mb-2">
        <MudIcon Icon="@Icons.Material.Filled.FlashOn" Style="vertical-align: middle; font-size: 3rem" />
        Fluent API Dynamic Form
    </MudText>
    <MudText Typo="Typo.body1" GutterBottom="true" Class="mb-6">
        This demonstrates the fluent API with helper methods for common field types and streamlined form building.
    </MudText>
    
    <MudPaper Elevation="2" Class="pa-0">
        <MudTabs Elevation="0" Rounded="false" PanelClass="pa-6">
            <MudTabPanel Text="Form Demo" Icon="@Icons.Material.Filled.ContactPage">
                <MudGrid>
                    <MudItem xs="12" lg="8">
                        <MudPaper Elevation="1" Class="pa-6">
                            <MudText Typo="Typo.h5" GutterBottom="true" Class="mb-4 d-flex align-items-center">
                                <MudIcon Icon="@Icons.Material.Filled.Assignment" Class="me-2" />
                                Contact Information Form
                            </MudText>
                            
                            @if (_isSubmitted)
                            {
                                <FormSuccessDisplay DataDisplayItems="@GetDataDisplayItems()"
                                                   OnReset="@ResetForm" />
                            }
                            else
                            {
                                <FormCraftComponent TModel="ContactModel" 
                                                    Model="@_model" 
                                                    Configuration="@_formConfiguration"
                                                    OnValidSubmit="@HandleValidSubmit"
                                                    OnFieldChanged="@((args) => HandleFieldChanged(args.fieldName, args.value))"
                                                    IsSubmitting="@_isSubmitting"
                                                    ShowSubmitButton="true"
                                                    SubmitButtonText="Submit Information"
                                                    SubmittingText="Submitting..."
                                                    SubmitButtonClass="px-8" />
                            }
                        </MudPaper>
                    </MudItem>
                    
                    <MudItem xs="12" lg="4">
                        <FormGuidelines Guidelines="@_guidelines" Title="Fluent API Features" />
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
            
            <MudTabPanel Text="Code Example" Icon="@Icons.Material.Filled.Code">
                <CodeExample Title="Fluent API Configuration" Language="csharp" Code="@GetGeneratedCode()" />
            </MudTabPanel>
            
            <MudTabPanel Text="Guidelines" Icon="@Icons.Material.Filled.Lightbulb">
                <FormGuidelines Title="Fluent API Guidelines">
                    <MudSimpleTable>
                        <thead>
                            <tr>
                                <th>Feature</th>
                                <th>Usage</th>
                                <th>Example</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Text Fields</td>
                                <td>Quick text field creation</td>
                                <td><code>.AddRequiredTextField(x => x.Name, "Name", "Enter name")</code></td>
                            </tr>
                            <tr>
                                <td>Email Fields</td>
                                <td>Email with built-in validation</td>
                                <td><code>.AddEmailField(x => x.Email)</code></td>
                            </tr>
                            <tr>
                                <td>Numeric Fields</td>
                                <td>Numbers with min/max constraints</td>
                                <td><code>.AddNumericField(x => x.Age, "Age", 16, 100)</code></td>
                            </tr>
                            <tr>
                                <td>Field Dependencies</td>
                                <td>Conditional visibility/updates</td>
                                <td><code>.VisibleWhen(m => !string.IsNullOrEmpty(m.Country))</code></td>
                            </tr>
                            <tr>
                                <td>Layout Control</td>
                                <td>Form layout configuration</td>
                                <td><code>.WithLayout(FormLayout.Horizontal)</code></td>
                            </tr>
                        </tbody>
                    </MudSimpleTable>
                </FormGuidelines>
            </MudTabPanel>
        </MudTabs>
    </MudPaper>
</MudContainer>

@code {
    private ContactModel _model = new();
    private bool _isSubmitted;
    private bool _isSubmitting;
    private List<string> _fieldChanges = new();
    private IFormConfiguration<ContactModel> _formConfiguration = null!;
    
    private List<FormGuidelines.GuidelineItem> _guidelines = new()
    {
        new() { Icon = Icons.Material.Filled.FlashOn, Color = Color.Primary, Text = "Fluent helper methods for common fields" },
        new() { Icon = Icons.Material.Filled.Speed, Color = Color.Secondary, Text = "Streamlined form building process" },
        new() { Icon = Icons.Material.Filled.AutoAwesome, Color = Color.Tertiary, Text = "Automatic validation and layout" },
        new() { Icon = Icons.Material.Filled.Tune, Color = Color.Info, Text = "Configurable form layouts" },
        new() { Icon = Icons.Material.Filled.Security, Color = Color.Success, Text = "Built-in field validation rules" },
        new() { Icon = Icons.Material.Filled.Psychology, Color = Color.Warning, Text = "Intelligent dependency handling" }
    };
    
    protected override void OnInitialized()
    {
        // Much simpler form creation using fluent methods
        _formConfiguration = FormBuilder<ContactModel>
            .Create()
            .WithLayout(FormLayout.Horizontal)
            .AddRequiredTextField(x => x.FirstName, "First Name", "Enter your first name", 2)
            .AddRequiredTextField(x => x.LastName, "Last Name", "Enter your last name", 2)
            .AddEmailField(x => x.Email)
            .AddNumericField(x => x.Age, "Age", 16, 100)
            .AddField(x => x.ExpectedSalary)
                .WithLabel("Expected Salary")
                .WithPlaceholder("$0.00")
                .WithHelpText("Enter amount in $")
            .AddField(x => x.HourlyRate)
                .WithLabel("Hourly Rate")
                .WithPlaceholder("50.00")
                .WithHelpText("Enter hourly rate")
            .AddField(x => x.Country)
                .WithLabel("Country")
                .Required("Please select a country")
                .WithOptions(
                ("US", "United States"),
                ("CA", "Canada"),
                ("UK", "United Kingdom"),
                ("DE", "Germany"),
                ("FR", "France")
                )
            .AddField(x => x.City)
                .WithLabel("City")
                .WithPlaceholder("Enter your city")
                .VisibleWhen(m => !string.IsNullOrEmpty(m.Country))
                .DependsOn(x => x.Country, (model, country) =>
                {
                    if (string.IsNullOrEmpty(country))
                    {
                        model.City = null;
                    }
                })
                .AddField(x => x.SubscribeToNewsletter)
                .WithLabel("Subscribe to Newsletter")
                .WithHelpText("Get updates about new features")
            .Build();
    }
    
    private async Task HandleValidSubmit(ContactModel submittedModel)
    {
        _isSubmitting = true;
        StateHasChanged();
        
        // Simulate API call
        await Task.Delay(2000);
        
        _isSubmitted = true;
        _isSubmitting = false;
        StateHasChanged();
    }
    
    private void ResetForm()
    {
        _model = new ContactModel();
        _isSubmitted = false;
        _isSubmitting = false;
        _fieldChanges.Clear();
        StateHasChanged();
    }
    
    private Task HandleFieldChanged(string fieldName, object? value)
    {
        _fieldChanges.Add($"{DateTime.Now:HH:mm:ss} - {fieldName}: {value}");
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private List<FormSuccessDisplay.DataDisplayItem> GetDataDisplayItems()
    {
        var items = new List<FormSuccessDisplay.DataDisplayItem>
        {
            new() { Label = "Full Name", Value = $"{_model.FirstName} {_model.LastName}" },
            new() { Label = "Email", Value = _model.Email },
            new() { Label = "Age", Value = $"{_model.Age} years old" },
            new() { Label = "Country", Value = _model.Country }
        };
        
        if (!string.IsNullOrEmpty(_model.City))
            items.Add(new() { Label = "City", Value = _model.City });
            
        if (_model.ExpectedSalary.HasValue)
            items.Add(new() { Label = "Expected Salary", Value = $"${_model.ExpectedSalary.Value:N2}" });
            
        if (_model.HourlyRate.HasValue)
            items.Add(new() { Label = "Hourly Rate", Value = $"${_model.HourlyRate.Value:N2}/hr" });
            
        items.Add(new() { Label = "Newsletter", Value = _model.SubscribeToNewsletter ? "Subscribed" : "Not Subscribed" });
        
        if (_fieldChanges.Any())
            items.Add(new() { Label = "Field Changes", Value = $"{_fieldChanges.Count} changes tracked" });
        
        return items;
    }
    
    private string GetGeneratedCode()
    {
        var formCode = CodeGenerator.GenerateFormBuilderCode(_formConfiguration);
        
        // Add usage example
        const string usageExample = @"

// Use in Razor component
<FormCraftComponent TModel=""ContactModel"" 
    Model=""@_model"" 
    Configuration=""@_formConfiguration""
    OnValidSubmit=""@HandleValidSubmit""
    OnFieldChanged=""@(args => HandleFieldChanged(args.fieldName, args.value))""
    ShowSubmitButton=""true""
    SubmitButtonText=""Submit Information"" />";
        
        return formCode + usageExample;
    }
}